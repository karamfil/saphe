" Always show the mode, so you know what is up:
set showmode

" Turn on the wildmenu, get wild!
set wildmenu

" Disable smart indent
set smarttab autoindent nosmartindent

" Undofile and persistent history
set undofile
if !isdirectory($HOME."/.vim/_temp/undodir")
    call mkdir($HOME."/.vim/_temp/undodir", "", 0700)
endif

" No annoying sound on errors
set noerrorbells visualbell t_vb=

set clipboard^=unnamed,unnamedplus

" Clear out the cruft:
set nobackup nowritebackup noswapfile

" Make searching easy, and case insensitive:
set ignorecase smartcase incsearch hlsearch

if exists('g:vscode')
  set nonumber
else
  colorscheme sunburst
  set background=dark
  set termguicolors

  set listchars=tab:→\ ,nbsp:␣,trail:•,extends:»,precedes:«

  " Make vim use the system clipboard:
  set mouse=a

  " Gives you a little jazzy info on the bottom:
  set title ruler

  " Enable hidden buffers
  set hidden

  " Reload files changed outside automatically
  " set autoread

  " Lint config
  let g:ale_fixers = {
  \   '*': ['remove_trailing_lines', 'trim_whitespace'],
  \   'javascript': ['eslint'],
  \}

  " Use deoplete autocomplete
  let g:deoplete#enable_at_startup = 1
endif


"
" Plugins Settings
" """"""""""""""""

" Hard Time - to turn on you can use :HardTimeToggle
" let g:hardtime_default_on = 1
let g:hardtime_showmsg = 1
let g:hardtime_ignore_buffer_patterns = [ "CustomPatt[ae]rn", "NERD.*" ]


" Ack set to use ripgrep
if executable('rg')
  let g:ackprg = 'rg --vimgrep'
endif

"
" Mappings
"
let mapleader = " "
let maplocalleader = "\\"

map <ENTER> @@

map <Leader> <Plug>(easymotion-prefix)

" Let's remove this annoying :W and :Q
cnoremap W w
cnoremap Q q

" Fast scrolling
nnoremap <C-e>  3<C-e>
nnoremap <C-y>  3<C-y>

" Easy Align
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Which Key
" nnoremap <silent> <leader> :WhichKeyVisual '<Space>'<CR>
" nnoremap <silent> <localleader> :WhichKeyVisual '\\'<CR>

nmap <silent> <C-Up> <Plug>(ale_previous_wrap)
nmap <silent> <C-Down> <Plug>(ale_next_wrap)

" Repeatable Motions / TODO move these on its own separate file
" repeat the last [count]motion or the last zap-key:
map <expr> ; repmo#LastKey(';')|sunmap ;
map <expr> , repmo#LastRevKey(',')|sunmap ,

" add these mappings when repeating with `;' or `,':
noremap <expr> f repmo#ZapKey('f')|sunmap f
noremap <expr> F repmo#ZapKey('F')|sunmap F
noremap <expr> t repmo#ZapKey('t')|sunmap t
noremap <expr> T repmo#ZapKey('T')|sunmap T

" map a motion and its reverse motion:
noremap <expr> k repmo#SelfKey('k', 'j')|sunmap k
noremap <expr> j repmo#SelfKey('j', 'k')|sunmap j
noremap <expr> h repmo#SelfKey('h', 'l')|sunmap h
noremap <expr> l repmo#SelfKey('l', 'h')|sunmap l
noremap <expr> w repmo#SelfKey('w', 'b')|sunmap w
noremap <expr> b repmo#SelfKey('b', 'w')|sunmap b
noremap <expr> e repmo#SelfKey('e', 'ge')|sunmap e
noremap <expr> ge repmo#SelfKey('ge', 'e')|sunmap ge
noremap <expr> E repmo#SelfKey('E', 'gE')|sunmap E
noremap <expr> gE repmo#SelfKey('gE', 'E')|sunmap gE

" TODO think about settings C-o as reverse
noremap <expr> ( repmo#SelfKey('(', ')')|sunmap (
noremap <expr> ) repmo#SelfKey(')', '(')|sunmap )
noremap <expr> { repmo#SelfKey('{', '}')|sunmap {
noremap <expr> } repmo#SelfKey('}', '{')|sunmap }

" Method
noremap <expr> [m repmo#SelfKey('[m', ']m')|sunmap [m
noremap <expr> ]m repmo#SelfKey(']m', '[m')|sunmap ]m
noremap <expr> [M repmo#SelfKey('[M', ']M')|sunmap [M
noremap <expr> ]M repmo#SelfKey(']M', '[M')|sunmap ]M

" Comment
noremap <expr> [* repmo#SelfKey('[*', ']*')|sunmap [*
noremap <expr> ]* repmo#SelfKey(']*', '[*')|sunmap ]*

